/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default         none;

    div(rhoPhi,U)        Gauss linearUpwind grad(U);
    div(phi,alpha)       Gauss vanLeer;
    div(phirb,alpha)     Gauss linear;
    div((rhoPhi*interpolate(Cp)),T)  Gauss linear;
    div(phi,k)      bounded Gauss upwind;
    div(phi,omega)  bounded Gauss upwind;
    div(rhoPhi,k)  bounded Gauss upwind;
    div(rhoPhi,omega)  bounded Gauss upwind;
    div(((thermo:mu+((nut*rho)*(1-max(min(alpha.kondensate,1),0))))*dev(grad(U).T()))) Gauss linear;
    div(((((thermo:mu|thermo:rho)*rho)+((nut*rho)*(1-max(min(alpha.kondensate,1),0))))*dev(grad(U).T()))) Gauss linear;
    div(((thermoMu+((nut*rho)*(1-max(min(alpha.kondensate,1),0))))*dev(grad(U).T()))) Gauss linear;
}

laplacianSchemes
{
    default              Gauss linear limited corrected 0.5;
}

snGradSchemes
{
    default              limited corrected 0.5;
}

fluxRequired
{
    default              none;
    p_rgh;
    pcorr;
    alpha.kondensate;
}

wallDist
{
    method meshWave;
}

// ************************************************************************* //
